import type { Frameworks } from '@wdio/types';
import type { BeforeCommandArgs, AfterCommandArgs } from '@wdio/reporter';
import type { Feature, Scenario, CucumberHook, CucumberHookParams, Pickle, ITestCaseHookParameter } from './cucumber-types.js';
import type { TestMeta, UploadType, CurrentRunInfo, StdLog } from './types.js';
declare class _InsightsHandler {
    private _browser;
    private _framework?;
    private _tests;
    private _hooks;
    private _platformMeta;
    private _commands;
    private _gitConfigPath?;
    private _suiteFile?;
    private _requestQueueHandler;
    private _currentTest;
    private _currentHook;
    private _cucumberData;
    constructor(_browser: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser, isAppAutomate?: boolean, _framework?: string | undefined);
    registerListeners(): void;
    setSuiteFile(filename: string): void;
    before(): Promise<void>;
    getCucumberHookType(test: CucumberHook | undefined): string | null;
    getCucumberHookName(hookType: string | undefined): string;
    getCucumberHookUniqueId(hookType: string, hook: CucumberHook | undefined): string | null;
    getCucumberFeatureUniqueId(): string;
    setCurrentHook(hookDetails: CurrentRunInfo): void;
    sendScenarioObjectSkipped(scenario: Scenario, feature: Feature, uri: string): Promise<void>;
    processCucumberHook(test: CucumberHook | undefined, params: CucumberHookParams, result?: Frameworks.TestResult): Promise<void>;
    beforeHook(test: Frameworks.Test | CucumberHook | undefined, context: any): Promise<void>;
    afterHook(test: Frameworks.Test | CucumberHook | undefined, result: Frameworks.TestResult): Promise<void>;
    sendHookRunEvent(hookData: TestMeta, eventType: string, result?: Frameworks.TestResult): Promise<void>;
    beforeTest(test: Frameworks.Test): Promise<void>;
    afterTest(test: Frameworks.Test, result: Frameworks.TestResult): Promise<void>;
    /**
      * Cucumber Only
      */
    beforeFeature(uri: string, feature: Feature): Promise<void>;
    beforeScenario(world: ITestCaseHookParameter): Promise<void>;
    afterScenario(world: ITestCaseHookParameter): Promise<void>;
    beforeStep(step: Frameworks.PickleStep, scenario: Pickle): Promise<void>;
    afterStep(step: Frameworks.PickleStep, scenario: Pickle, result: Frameworks.PickleResult): Promise<void>;
    uploadPending(waitTimeout?: number, waitInterval?: number): Promise<unknown>;
    teardown(): Promise<void>;
    /**
     * misc methods
     */
    appendTestItemLog: (stdLog: StdLog) => Promise<void>;
    sendData(data: UploadType): Promise<void>;
    browserCommand(commandType: string, args: BeforeCommandArgs & AfterCommandArgs, test?: Frameworks.Test | ITestCaseHookParameter): Promise<void>;
    private attachHookData;
    private setHooksFromSuite;
    private getHierarchy;
    private sendTestRunEvent;
    private getTestRunId;
    private getTestRunIdFromSuite;
    private sendTestRunEventForCucumber;
    private getIntegrationsObject;
    private getIdentifier;
}
declare const InsightsHandler: typeof _InsightsHandler;
type InsightsHandler = _InsightsHandler;
export default InsightsHandler;
//# sourceMappingURL=insights-handler.d.ts.map