import { hostname, platform, type, version, arch } from 'node:os';
import { promisify } from 'node:util';
import http from 'node:http';
import https from 'node:https';
import path from 'node:path';
import util from 'node:util';
import logger from '@wdio/logger';
import got, { HTTPError } from 'got';
import gitRepoInfo from 'git-repo-info';
import gitconfig from 'gitconfiglocal';
import logPatcher from './logPatcher.js';
import PerformanceTester from './performance-tester.js';
import { ACCESSIBILITY_API_URL, BROWSER_DESCRIPTION, DATA_ENDPOINT, DATA_EVENT_ENDPOINT, DATA_SCREENSHOT_ENDPOINT, consoleHolder } from './constants.js';
import RequestQueueHandler from './request-handler.js';
import CrashReporter from './crash-reporter.js';
import { accessibilityResults, accessibilityResultsSummary } from './scripts/test-event-scripts.js';
const pGitconfig = promisify(gitconfig);
const log = logger('@wdio/browserstack-service');
export const DEFAULT_REQUEST_CONFIG = {
    agent: {
        http: new http.Agent({ keepAlive: true }),
        https: new https.Agent({ keepAlive: true }),
    },
    headers: {
        'Content-Type': 'application/json',
        'X-BSTACK-OBS': 'true'
    },
};
/**
 * get browser description for Browserstack service
 * @param cap browser capablities
 */
export function getBrowserDescription(cap) {
    cap = cap || {};
    if (cap['bstack:options']) {
        cap = { ...cap, ...cap['bstack:options'] };
    }
    /**
     * These keys describe the browser the test was run on
     */
    return BROWSER_DESCRIPTION
        .map((k) => cap[k])
        .filter(Boolean)
        .join(' ');
}
/**
 * get correct browser capabilities object in both multiremote and normal setups
 * @param browser browser object
 * @param caps browser capbilities object. In case of multiremote, the object itself should have a property named 'capabilities'
 * @param browserName browser name in case of multiremote
 */
export function getBrowserCapabilities(browser, caps, browserName) {
    if (!browser.isMultiremote) {
        return { ...browser.capabilities, ...caps };
    }
    const multiCaps = caps;
    const globalCap = browserName && browser.getInstance(browserName) ? browser.getInstance(browserName).capabilities : {};
    const cap = browserName && multiCaps[browserName] ? multiCaps[browserName].capabilities : {};
    return { ...globalCap, ...cap };
}
/**
 * check for browserstack W3C capabilities. Does not support legacy capabilities
 * @param cap browser capabilities
 */
export function isBrowserstackCapability(cap) {
    return Boolean(cap &&
        cap['bstack:options'] &&
        // return false if the only cap in bstack:options is wdioService,
        // as that is added by the service and not present in user passed caps
        !(Object.keys(cap['bstack:options']).length === 1 &&
            cap['bstack:options'].wdioService));
}
export function getParentSuiteName(fullTitle, testSuiteTitle) {
    const fullTitleWords = fullTitle.split(' ');
    const testSuiteTitleWords = testSuiteTitle.split(' ');
    const shortestLength = Math.min(fullTitleWords.length, testSuiteTitleWords.length);
    let c = 0;
    let parentSuiteName = '';
    while (c < shortestLength && fullTitleWords[c] === testSuiteTitleWords[c]) {
        parentSuiteName += fullTitleWords[c++] + ' ';
    }
    return parentSuiteName.trim();
}
function processError(error, fn, args) {
    log.error(`Error in executing ${fn.name} with args ${args}: ${error}`);
    let argsString;
    try {
        argsString = JSON.stringify(args);
    }
    catch (e) {
        argsString = util.inspect(args, { depth: 2 });
    }
    CrashReporter.uploadCrashReport(`Error in executing ${fn.name} with args ${argsString} : ${error}`, error && error.stack);
}
export function o11yErrorHandler(fn) {
    return function (...args) {
        try {
            let functionToHandle = fn;
            if (process.env.BROWSERSTACK_O11Y_PERF_MEASUREMENT) {
                functionToHandle = PerformanceTester.getPerformance().timerify(functionToHandle);
            }
            const result = functionToHandle(...args);
            if (result instanceof Promise) {
                return result.catch(error => processError(error, fn, args));
            }
            return result;
        }
        catch (error) {
            processError(error, fn, args);
        }
    };
}
export function errorHandler(fn) {
    return function (...args) {
        try {
            const functionToHandle = fn;
            const result = functionToHandle(...args);
            if (result instanceof Promise) {
                return result.catch(error => log.error(`Error in executing ${fn.name} with args ${args}: ${error}`));
            }
            return result;
        }
        catch (error) {
            log.error(`Error in executing ${fn.name} with args ${args}: ${error}`);
        }
    };
}
export async function nodeRequest(requestType, apiEndpoint, options, apiUrl, timeout = 120000) {
    try {
        const response = await got(`${apiUrl}/${apiEndpoint}`, {
            method: requestType,
            timeout: {
                request: timeout
            },
            ...options
        }).json();
        return response;
    }
    catch (error) {
        if (error instanceof HTTPError && error.response) {
            const errorMessageJson = error.response.body ? JSON.parse(error.response.body.toString()) : null;
            const errorMessage = errorMessageJson ? errorMessageJson.message : null;
            if (errorMessage) {
                log.error(`${errorMessage} - ${error.stack}`);
            }
            else {
                log.error(`${error.stack}`);
            }
            throw error;
        }
        else {
            log.error(`Failed to fire api request due to ${error} - ${error.stack}`);
            throw error;
        }
    }
}
export function o11yClassErrorHandler(errorClass) {
    const prototype = errorClass.prototype;
    if (Object.getOwnPropertyNames(prototype).length < 2) {
        return errorClass;
    }
    Object.getOwnPropertyNames(prototype).forEach((methodName) => {
        const method = prototype[methodName];
        if (typeof method === 'function' && methodName !== 'constructor') {
            // In order to preserve this context, need to define like this
            Object.defineProperty(prototype, methodName, {
                writable: true,
                value: function (...args) {
                    try {
                        const result = (process.env.BROWSERSTACK_O11Y_PERF_MEASUREMENT ? PerformanceTester.getPerformance().timerify(method) : method).call(this, ...args);
                        if (result instanceof Promise) {
                            return result.catch(error => processError(error, method, args));
                        }
                        return result;
                    }
                    catch (err) {
                        processError(err, method, args);
                    }
                }
            });
        }
    });
    return errorClass;
}
export const launchTestSession = o11yErrorHandler(async function launchTestSession(options, config, bsConfig) {
    const data = {
        format: 'json',
        project_name: getObservabilityProject(options, bsConfig.projectName),
        name: getObservabilityBuild(options, bsConfig.buildName),
        build_identifier: bsConfig.buildIdentifier,
        start_time: (new Date()).toISOString(),
        tags: getObservabilityBuildTags(options, bsConfig.buildTag),
        host_info: {
            hostname: hostname(),
            platform: platform(),
            type: type(),
            version: version(),
            arch: arch()
        },
        ci_info: getCiInfo(),
        build_run_identifier: process.env.BROWSERSTACK_BUILD_RUN_IDENTIFIER,
        failed_tests_rerun: process.env.BROWSERSTACK_RERUN || false,
        version_control: await getGitMetaData(),
        observability_version: {
            frameworkName: 'WebdriverIO-' + config.framework,
            sdkVersion: bsConfig.bstackServiceVersion
        },
        config: {}
    };
    try {
        if (Object.keys(CrashReporter.userConfigForReporting).length === 0) {
            CrashReporter.userConfigForReporting = process.env.USER_CONFIG_FOR_REPORTING !== undefined ? JSON.parse(process.env.USER_CONFIG_FOR_REPORTING) : {};
        }
    }
    catch (error) {
        return log.error(`[Crash_Report_Upload] Failed to parse user config while sending build start event due to ${error}`);
    }
    data.config = CrashReporter.userConfigForReporting;
    try {
        const url = `${DATA_ENDPOINT}/api/v1/builds`;
        const response = await got.post(url, {
            ...DEFAULT_REQUEST_CONFIG,
            username: getObservabilityUser(options, config),
            password: getObservabilityKey(options, config),
            json: data
        }).json();
        log.debug(`[Start_Build] Success response: ${JSON.stringify(response)}`);
        process.env.BS_TESTOPS_BUILD_COMPLETED = 'true';
        if (response.jwt) {
            process.env.BS_TESTOPS_JWT = response.jwt;
        }
        if (response.build_hashed_id) {
            process.env.BS_TESTOPS_BUILD_HASHED_ID = response.build_hashed_id;
        }
        if (response.allow_screenshots) {
            process.env.BS_TESTOPS_ALLOW_SCREENSHOTS = response.allow_screenshots.toString();
        }
    }
    catch (error) {
        if (error instanceof HTTPError && error.response) {
            const errorMessageJson = error.response.body ? JSON.parse(error.response.body.toString()) : null;
            const errorMessage = errorMessageJson ? errorMessageJson.message : null, errorType = errorMessageJson ? errorMessageJson.errorType : null;
            switch (errorType) {
                case 'ERROR_INVALID_CREDENTIALS':
                    log.error(errorMessage);
                    break;
                case 'ERROR_ACCESS_DENIED':
                    log.info(errorMessage);
                    break;
                case 'ERROR_SDK_DEPRECATED':
                    log.error(errorMessage);
                    break;
                default:
                    log.error(errorMessage);
            }
        }
        else {
            log.error(`Data upload to BrowserStack Test Observability failed due to ${error}`);
        }
    }
});
export const validateCapsWithA11y = (deviceName, platformMeta, chromeOptions) => {
    try {
        if (deviceName) {
            log.warn('Accessibility Automation will run only on Desktop browsers.');
            return false;
        }
        if (platformMeta?.browser_name?.toLowerCase() !== 'chrome') {
            log.warn('Accessibility Automation will run only on Chrome browsers.');
            return false;
        }
        const browserVersion = platformMeta?.browser_version;
        if (!isUndefined(browserVersion) && !(browserVersion === 'latest' || parseFloat(browserVersion + '') > 94)) {
            log.warn('Accessibility Automation will run only on Chrome browser version greater than 94.');
            return false;
        }
        if (chromeOptions?.args?.includes('--headless')) {
            log.warn('Accessibility Automation will not run on legacy headless mode. Switch to new headless mode or avoid using headless mode.');
            return false;
        }
        return true;
    }
    catch (error) {
        log.debug(`Exception in checking capabilities compatibility with Accessibility. Error: ${error}`);
    }
    return false;
};
export const shouldScanTestForAccessibility = (suiteTitle, testTitle, accessibilityOptions) => {
    try {
        const includeTags = Array.isArray(accessibilityOptions?.includeTagsInTestingScope) ? accessibilityOptions?.includeTagsInTestingScope : [];
        const excludeTags = Array.isArray(accessibilityOptions?.excludeTagsInTestingScope) ? accessibilityOptions?.excludeTagsInTestingScope : [];
        const fullTestName = suiteTitle + ' ' + testTitle;
        const excluded = excludeTags?.some((exclude) => fullTestName.includes(exclude));
        const included = includeTags?.length === 0 || includeTags?.some((include) => fullTestName.includes(include));
        return !excluded && included;
    }
    catch (error) {
        log.debug('Error while validating test case for accessibility before scanning. Error : ', error);
    }
    return false;
};
export const isAccessibilityAutomationSession = (accessibilityFlag) => {
    try {
        const hasA11yJwtToken = typeof process.env.BSTACK_A11Y_JWT === 'string' && process.env.BSTACK_A11Y_JWT.length > 0 && process.env.BSTACK_A11Y_JWT !== 'null' && process.env.BSTACK_A11Y_JWT !== 'undefined';
        return accessibilityFlag && hasA11yJwtToken;
    }
    catch (error) {
        log.debug(`Exception in verifying the Accessibility session with error : ${error}`);
    }
    return false;
};
export const createAccessibilityTestRun = errorHandler(async function createAccessibilityTestRun(options, config, bsConfig) {
    const userName = getBrowserStackUser(config);
    const accessKey = getBrowserStackKey(config);
    if (isUndefined(userName) || isUndefined(accessKey)) {
        log.error('Exception while creating test run for BrowserStack Accessibility Automation: Missing BrowserStack credentials');
        return null;
    }
    const data = {
        'projectName': bsConfig.projectName,
        'buildName': bsConfig.buildName ||
            path.basename(path.resolve(process.cwd())),
        'startTime': (new Date()).toISOString(),
        'description': '',
        'source': {
            frameworkName: 'WebdriverIO-' + config.framework,
            frameworkVersion: bsConfig.bstackServiceVersion,
            sdkVersion: bsConfig.bstackServiceVersion
        },
        'settings': bsConfig.accessibilityOptions || {},
        'versionControl': await getGitMetaData(),
        'ciInfo': getCiInfo(),
        'hostInfo': {
            hostname: hostname(),
            platform: platform(),
            type: type(),
            version: version(),
            arch: arch()
        },
        'browserstackAutomation': true,
    };
    const requestOptions = {
        json: data,
        username: getBrowserStackUser(config),
        password: getBrowserStackKey(config),
    };
    try {
        const response = await nodeRequest('POST', 'test_runs', requestOptions, ACCESSIBILITY_API_URL);
        log.debug(`[Create Accessibility Test Run] Success response: ${JSON.stringify(response)}`);
        if (response.data.accessibilityToken) {
            process.env.BSTACK_A11Y_JWT = response.data.accessibilityToken;
        }
        if (response.data.id) {
            process.env.BS_A11Y_TEST_RUN_ID = response.data.id;
        }
        log.debug(`BrowserStack Accessibility Automation Test Run ID: ${response.data.id}`);
        return response.data.scannerVersion;
    }
    catch (error) {
        if (error.response) {
            log.error(`Exception while creating test run for BrowserStack Accessibility Automation: ${error.response.status} ${error.response.statusText} ${JSON.stringify(error.response.data)}`);
        }
        else {
            const errorMessage = error.message;
            if (errorMessage === 'Invalid configuration passed.') {
                log.error(`Exception while creating test run for BrowserStack Accessibility Automation: ${errorMessage || error.stack}`);
                for (const errorkey of error.errors) {
                    log.error(errorkey.message);
                }
            }
            else {
                log.error(`Exception while creating test run for BrowserStack Accessibility Automation: ${errorMessage || error.stack}`);
            }
        }
        return null;
    }
});
export const getA11yResults = async (browser, isBrowserStackSession, isAccessibility) => {
    if (!isBrowserStackSession) {
        log.warn('Not a BrowserStack Automate session, cannot retrieve Accessibility results.');
        return []; // since we are running only on Automate as of now
    }
    if (!isAccessibilityAutomationSession(isAccessibility)) {
        log.warn('Not an Accessibility Automation session, cannot retrieve Accessibility results.');
        return [];
    }
    try {
        const results = await browser.execute(accessibilityResults);
        return results;
    }
    catch {
        log.error('No accessibility results were found.');
        return [];
    }
};
export const getA11yResultsSummary = async (browser, isBrowserStackSession, isAccessibility) => {
    if (!isBrowserStackSession) {
        return {}; // since we are running only on Automate as of now
    }
    if (!isAccessibilityAutomationSession(isAccessibility)) {
        log.warn('Not an Accessibility Automation session, cannot retrieve Accessibility results summary.');
        return {};
    }
    try {
        const summaryResults = await browser.execute(accessibilityResultsSummary);
        return summaryResults;
    }
    catch {
        log.error('No accessibility summary was found.');
        return {};
    }
};
export const stopAccessibilityTestRun = errorHandler(async function stopAccessibilityTestRun() {
    const hasA11yJwtToken = typeof process.env.BSTACK_A11Y_JWT === 'string' && process.env.BSTACK_A11Y_JWT.length > 0 && process.env.BSTACK_A11Y_JWT !== 'null' && process.env.BSTACK_A11Y_JWT !== 'undefined';
    if (!hasA11yJwtToken) {
        return {
            status: 'error',
            message: 'Build creation had failed.'
        };
    }
    const data = {
        'endTime': (new Date()).toISOString(),
    };
    const requestOptions = { ...{
            json: data,
            headers: {
                'Authorization': `Bearer ${process.env.BSTACK_A11Y_JWT}`,
            }
        } };
    try {
        const response = await nodeRequest('PUT', 'test_runs/stop', requestOptions, ACCESSIBILITY_API_URL);
        if (response.data && response.data.error) {
            throw new Error('Invalid request: ' + response.data.error);
        }
        else if (response.error) {
            throw new Error('Invalid request: ' + response.error);
        }
        else {
            log.info(`BrowserStack Accessibility Automation Test Run marked as completed at ${new Date().toISOString()}`);
            return { status: 'success', message: '' };
        }
    }
    catch (error) {
        if (error.response && error.response.status && error.response.statusText && error.response.data) {
            log.error(`Exception while marking completion of BrowserStack Accessibility Automation Test Run: ${error.response.status} ${error.response.statusText} ${JSON.stringify(error.response.data)}`);
        }
        else {
            log.error(`Exception while marking completion of BrowserStack Accessibility Automation Test Run: ${error.message || util.format(error)}`);
        }
        return {
            status: 'error',
            message: error.message ||
                (error.response ? `${error.response.status}:${error.response.statusText}` : error)
        };
    }
});
export const stopBuildUpstream = o11yErrorHandler(async function stopBuildUpstream() {
    if (!process.env.BS_TESTOPS_BUILD_COMPLETED) {
        return;
    }
    if (!process.env.BS_TESTOPS_JWT) {
        log.debug('[STOP_BUILD] Missing Authentication Token/ Build ID');
        return {
            status: 'error',
            message: 'Token/buildID is undefined, build creation might have failed'
        };
    }
    const data = {
        'stop_time': (new Date()).toISOString()
    };
    try {
        const url = `${DATA_ENDPOINT}/api/v1/builds/${process.env.BS_TESTOPS_BUILD_HASHED_ID}/stop`;
        const response = await got.put(url, {
            agent: DEFAULT_REQUEST_CONFIG.agent,
            headers: {
                ...DEFAULT_REQUEST_CONFIG.headers,
                'Authorization': `Bearer ${process.env.BS_TESTOPS_JWT}`
            },
            json: data
        }).json();
        log.debug(`[STOP_BUILD] Success response: ${JSON.stringify(response)}`);
        return {
            status: 'success',
            message: ''
        };
    }
    catch (error) {
        log.debug(`[STOP_BUILD] Failed. Error: ${error}`);
        return {
            status: 'error',
            message: error.message
        };
    }
});
export function getCiInfo() {
    const env = process.env;
    // Jenkins
    if ((typeof env.JENKINS_URL === 'string' && env.JENKINS_URL.length > 0) || (typeof env.JENKINS_HOME === 'string' && env.JENKINS_HOME.length > 0)) {
        return {
            name: 'Jenkins',
            build_url: env.BUILD_URL,
            job_name: env.JOB_NAME,
            build_number: env.BUILD_NUMBER
        };
    }
    // CircleCI
    if (env.CI === 'true' && env.CIRCLECI === 'true') {
        return {
            name: 'CircleCI',
            build_url: env.CIRCLE_BUILD_URL,
            job_name: env.CIRCLE_JOB,
            build_number: env.CIRCLE_BUILD_NUM
        };
    }
    // Travis CI
    if (env.CI === 'true' && env.TRAVIS === 'true') {
        return {
            name: 'Travis CI',
            build_url: env.TRAVIS_BUILD_WEB_URL,
            job_name: env.TRAVIS_JOB_NAME,
            build_number: env.TRAVIS_BUILD_NUMBER
        };
    }
    // Codeship
    if (env.CI === 'true' && env.CI_NAME === 'codeship') {
        return {
            name: 'Codeship',
            build_url: null,
            job_name: null,
            build_number: null
        };
    }
    // Bitbucket
    if (env.BITBUCKET_BRANCH && env.BITBUCKET_COMMIT) {
        return {
            name: 'Bitbucket',
            build_url: env.BITBUCKET_GIT_HTTP_ORIGIN,
            job_name: null,
            build_number: env.BITBUCKET_BUILD_NUMBER
        };
    }
    // Drone
    if (env.CI === 'true' && env.DRONE === 'true') {
        return {
            name: 'Drone',
            build_url: env.DRONE_BUILD_LINK,
            job_name: null,
            build_number: env.DRONE_BUILD_NUMBER
        };
    }
    // Semaphore
    if (env.CI === 'true' && env.SEMAPHORE === 'true') {
        return {
            name: 'Semaphore',
            build_url: env.SEMAPHORE_ORGANIZATION_URL,
            job_name: env.SEMAPHORE_JOB_NAME,
            build_number: env.SEMAPHORE_JOB_ID
        };
    }
    // GitLab
    if (env.CI === 'true' && env.GITLAB_CI === 'true') {
        return {
            name: 'GitLab',
            build_url: env.CI_JOB_URL,
            job_name: env.CI_JOB_NAME,
            build_number: env.CI_JOB_ID
        };
    }
    // Buildkite
    if (env.CI === 'true' && env.BUILDKITE === 'true') {
        return {
            name: 'Buildkite',
            build_url: env.BUILDKITE_BUILD_URL,
            job_name: env.BUILDKITE_LABEL || env.BUILDKITE_PIPELINE_NAME,
            build_number: env.BUILDKITE_BUILD_NUMBER
        };
    }
    // Visual Studio Team Services
    if (env.TF_BUILD === 'True') {
        return {
            name: 'Visual Studio Team Services',
            build_url: `${env.SYSTEM_TEAMFOUNDATIONSERVERURI}${env.SYSTEM_TEAMPROJECTID}`,
            job_name: env.SYSTEM_DEFINITIONID,
            build_number: env.BUILD_BUILDID
        };
    }
    // if no matches, return null
    return null;
}
export async function getGitMetaData() {
    const info = gitRepoInfo();
    if (!info.commonGitDir) {
        return;
    }
    const { remote } = await pGitconfig(info.commonGitDir);
    const remotes = remote ? Object.keys(remote).map(remoteName => ({ name: remoteName, url: remote[remoteName].url })) : [];
    return {
        name: 'git',
        sha: info.sha,
        short_sha: info.abbreviatedSha,
        branch: info.branch,
        tag: info.tag,
        committer: info.committer,
        committer_date: info.committerDate,
        author: info.author,
        author_date: info.authorDate,
        commit_message: info.commitMessage,
        root: info.root,
        common_git_dir: info.commonGitDir,
        worktree_git_dir: info.worktreeGitDir,
        last_tag: info.lastTag,
        commits_since_last_tag: info.commitsSinceLastTag,
        remotes: remotes
    };
}
export function getUniqueIdentifier(test, framework) {
    if (framework === 'jasmine') {
        return test.fullName;
    }
    let parentTitle = test.parent;
    // Sometimes parent will be an object instead of a string
    if (typeof parentTitle === 'object') {
        parentTitle = parentTitle.title;
    }
    return `${parentTitle} - ${test.title}`;
}
export function getUniqueIdentifierForCucumber(world) {
    return world.pickle.uri + '_' + world.pickle.astNodeIds.join(',');
}
export function getCloudProvider(browser) {
    if (browser.options && browser.options.hostname && browser.options.hostname.includes('browserstack')) {
        return 'browserstack';
    }
    return 'unknown_grid';
}
export function isBrowserstackSession(browser) {
    return browser && getCloudProvider(browser).toLowerCase() === 'browserstack';
}
export function getScenarioExamples(world) {
    const scenario = world.pickle;
    // no examples present
    if ((scenario.astNodeIds && scenario.astNodeIds.length <= 1) || scenario.astNodeIds === undefined) {
        return;
    }
    const pickleId = scenario.astNodeIds[0];
    const examplesId = scenario.astNodeIds[1];
    const gherkinDocumentChildren = world.gherkinDocument.feature?.children;
    let examples = [];
    gherkinDocumentChildren?.forEach(child => {
        if (child.rule) {
            // handle if rule is present
            child.rule.children.forEach(childLevel2 => {
                if (childLevel2.scenario && childLevel2.scenario.id === pickleId && childLevel2.scenario.examples) {
                    const passedExamples = childLevel2.scenario.examples.flatMap((val) => (val.tableBody)).find((item) => item.id === examplesId)?.cells.map((val) => (val.value));
                    if (passedExamples) {
                        examples = passedExamples;
                    }
                }
            });
        }
        else if (child.scenario && child.scenario.id === pickleId && child.scenario.examples) {
            // handle if scenario outside rule
            const passedExamples = child.scenario.examples.flatMap((val) => (val.tableBody)).find((item) => item.id === examplesId)?.cells.map((val) => (val.value));
            if (passedExamples) {
                examples = passedExamples;
            }
        }
    });
    if (examples.length) {
        return examples;
    }
    return;
}
export function removeAnsiColors(message) {
    // https://stackoverflow.com/a/29497680
    // eslint-disable-next-line no-control-regex
    return message.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
}
export function getLogTag(eventType) {
    if (eventType === 'TestRunStarted' || eventType === 'TestRunFinished') {
        return 'Test_Upload';
    }
    else if (eventType === 'HookRunStarted' || eventType === 'HookRunFinished') {
        return 'Hook_Upload';
    }
    else if (eventType === 'ScreenshotCreated') {
        return 'Screenshot_Upload';
    }
    else if (eventType === 'LogCreated') {
        return 'Log_Upload';
    }
    return 'undefined';
}
export async function uploadEventData(eventData, eventUrl = DATA_EVENT_ENDPOINT) {
    let logTag = 'BATCH_UPLOAD';
    if (!Array.isArray(eventData)) {
        logTag = getLogTag(eventData.event_type);
    }
    if (eventUrl === DATA_SCREENSHOT_ENDPOINT) {
        logTag = 'screenshot_upload';
    }
    if (!process.env.BS_TESTOPS_BUILD_COMPLETED) {
        return;
    }
    if (!process.env.BS_TESTOPS_JWT) {
        log.debug(`[${logTag}] Missing Authentication Token/ Build ID`);
        return {
            status: 'error',
            message: 'Token/buildID is undefined, build creation might have failed'
        };
    }
    try {
        const url = `${DATA_ENDPOINT}/${eventUrl}`;
        RequestQueueHandler.getInstance().pendingUploads += 1;
        const data = await got.post(url, {
            agent: DEFAULT_REQUEST_CONFIG.agent,
            headers: {
                ...DEFAULT_REQUEST_CONFIG.headers,
                'Authorization': `Bearer ${process.env.BS_TESTOPS_JWT}`
            },
            json: eventData
        }).json();
        log.debug(`[${logTag}] Success response: ${JSON.stringify(data)}`);
        RequestQueueHandler.getInstance().pendingUploads -= 1;
    }
    catch (error) {
        log.debug(`[${logTag}] Failed. Error: ${error}`);
        RequestQueueHandler.getInstance().pendingUploads -= 1;
    }
}
// get hierarchy for a particular test (called by reporter for skipped tests)
export function getHierarchy(fullTitle) {
    if (!fullTitle) {
        return [];
    }
    return fullTitle.split('.').slice(0, -1);
}
export function getHookType(hookName) {
    if (hookName.startsWith('"before each"')) {
        return 'BEFORE_EACH';
    }
    else if (hookName.startsWith('"before all"')) {
        return 'BEFORE_ALL';
    }
    else if (hookName.startsWith('"after each"')) {
        return 'AFTER_EACH';
    }
    else if (hookName.startsWith('"after all"')) {
        return 'AFTER_ALL';
    }
    return 'unknown';
}
export function isScreenshotCommand(args) {
    return args.endpoint && args.endpoint.includes('/screenshot');
}
export function isBStackSession(config) {
    if (typeof config.user === 'string' && typeof config.key === 'string' && config.key.length === 20) {
        return true;
    }
    return false;
}
export function shouldAddServiceVersion(config, testObservability) {
    if (config.services && config.services.toString().includes('chromedriver') && testObservability !== false) {
        return false;
    }
    return true;
}
export async function batchAndPostEvents(eventUrl, kind, data) {
    if (!process.env.BS_TESTOPS_BUILD_COMPLETED || !process.env.BS_TESTOPS_JWT) {
        return;
    }
    try {
        const url = `${DATA_ENDPOINT}/${eventUrl}`;
        const response = await got.post(url, {
            agent: DEFAULT_REQUEST_CONFIG.agent,
            headers: {
                ...DEFAULT_REQUEST_CONFIG.headers,
                'Authorization': `Bearer ${process.env.BS_TESTOPS_JWT}`
            },
            json: data
        }).json();
        log.debug(`[${kind}] Success response: ${JSON.stringify(response)}`);
    }
    catch (error) {
        log.debug(`[${kind}] EXCEPTION IN ${kind} REQUEST TO TEST OBSERVABILITY : ${error}`);
    }
}
export function getObservabilityUser(options, config) {
    if (process.env.BROWSERSTACK_USERNAME) {
        return process.env.BROWSERSTACK_USERNAME;
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.user) {
        return options.testObservabilityOptions.user;
    }
    return config.user;
}
export function getObservabilityKey(options, config) {
    if (process.env.BROWSERSTACK_ACCESS_KEY) {
        return process.env.BROWSERSTACK_ACCESS_KEY;
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.key) {
        return options.testObservabilityOptions.key;
    }
    return config.key;
}
export function getObservabilityProject(options, bstackProjectName) {
    if (process.env.TEST_OBSERVABILITY_PROJECT_NAME) {
        return process.env.TEST_OBSERVABILITY_PROJECT_NAME;
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.projectName) {
        return options.testObservabilityOptions.projectName;
    }
    return bstackProjectName;
}
export function getObservabilityBuild(options, bstackBuildName) {
    if (process.env.TEST_OBSERVABILITY_BUILD_NAME) {
        return process.env.TEST_OBSERVABILITY_BUILD_NAME;
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.buildName) {
        return options.testObservabilityOptions.buildName;
    }
    return bstackBuildName || path.basename(path.resolve(process.cwd()));
}
export function getObservabilityBuildTags(options, bstackBuildTag) {
    if (process.env.TEST_OBSERVABILITY_BUILD_TAG) {
        return process.env.TEST_OBSERVABILITY_BUILD_TAG.split(',');
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.buildTag) {
        return options.testObservabilityOptions.buildTag;
    }
    if (bstackBuildTag) {
        return [bstackBuildTag];
    }
    return [];
}
export function getBrowserStackUser(config) {
    if (process.env.BROWSERSTACK_USERNAME) {
        return process.env.BROWSERSTACK_USERNAME;
    }
    return config.user;
}
export function getBrowserStackKey(config) {
    if (process.env.BROWSERSTACK_ACCESS_KEY) {
        return process.env.BROWSERSTACK_ACCESS_KEY;
    }
    return config.key;
}
export function isUndefined(value) {
    return value === undefined || value === null;
}
export function isTrue(value) {
    return (value + '') === 'true';
}
export function frameworkSupportsHook(hook, framework) {
    if (framework === 'mocha' && (hook === 'before' || hook === 'after' || hook === 'beforeEach' || hook === 'afterEach')) {
        return true;
    }
    if (framework === 'cucumber') {
        return true;
    }
    return false;
}
export function patchConsoleLogs() {
    const BSTestOpsPatcher = new logPatcher({});
    Object.keys(consoleHolder).forEach((method) => {
        const origMethod = console[method].bind(console);
        // Make sure we don't override Constructors
        // Arrow functions are not construable
        if (typeof console[method] === 'function'
            && method !== 'Console') {
            console[method] = (...args) => {
                origMethod(...args);
                BSTestOpsPatcher[method](...args);
            };
        }
    });
}
export function getFailureObject(error) {
    const stack = error.stack;
    const message = typeof error === 'string' ? error : error.message;
    const backtrace = stack ? removeAnsiColors(stack.toString()) : '';
    return {
        failure: [{ backtrace: [backtrace] }],
        failure_reason: removeAnsiColors(message.toString()),
        failure_type: message ? (message.toString().match(/AssertionError/) ? 'AssertionError' : 'UnhandledError') : null
    };
}
export async function pushDataToQueue(data, requestQueueHandler = undefined) {
    if (!requestQueueHandler) {
        requestQueueHandler = RequestQueueHandler.getInstance();
    }
    const req = requestQueueHandler.add(data);
    if (req.proceed && req.data) {
        await uploadEventData(req.data, req.url);
    }
}
export const sleep = (ms = 100) => new Promise((resolve) => setTimeout(resolve, ms));
